{"version":3,"sources":["redux/actioncreators.js","components/Word.js","components/Form.js","components/Filter.js","components/List.js","redux/filtermode.reducers.js","redux/words.reducers.js","redux/shouldshowform.reducers.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["toggleForm","type","setFilterMode","filterMode","setWord","dispatch","axios","get","then","response","words","data","addWord","en","vn","post","word","w","removeWord","_id","URL","delete","catch","error","console","log","message","toggleWord","isMemorized","put","Word","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","wordInfo","react_default","a","createElement","className","_this$props$word","_this2","key","onClick","Component","connect","actioncreators","Form","state","txtEn","txtVn","_this$state","setState","shouldShowForm","placeholder","value","onChange","evt","target","style","width","margin","Filter","List","_this$props","filter","components_Form","components_Filter","getFiltermode","map","components_Word","filterModeReducer","arguments","length","undefined","action","wordsReducer","objectSpread","concat","shouldShowFormReducer","reducer","combineReducers","store","createStore","applyMiddleware","thunk","App","es","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04b2c35d.chunk.js","sourcesContent":["import axios from 'axios';\r\nexport function toggleForm()\r\n{\r\n    return {type:'TOGGLE_FORM'}\r\n}\r\n\r\n\r\nexport function setFilterMode(filterMode)\r\n{\r\n    return{type:'SET_FILTER_MODE',filterMode}\r\n}\r\n\r\nexport function setWord(){\r\n    return function(dispatch){\r\n        const URL = \"https://server-thinh1411.herokuapp.com/word\"\r\n        axios.get(URL)\r\n        .then(response => dispatch({type : 'SET_WORDS' , words : response.data.words}));\r\n    }\r\n}\r\n\r\nexport function addWord(en,vn)\r\n{\r\n    return function(dispatch)\r\n    {\r\n        const URL = \"https://server-thinh1411.herokuapp.com/word\";\r\n        // const word = {en,vn}\r\n        axios.post(URL , {en , vn})\r\n        .then(response => dispatch({type : 'ADD_WORD' , word : response.data.w}));\r\n        // this.setState({txtEn : '' , txtVn : ''});\r\n    }\r\n}\r\n\r\nexport function removeWord(_id)\r\n{\r\n    return function(dispatch)\r\n    {\r\n        const URL = \"https://server-thinh1411.herokuapp.com/word/\"+_id;\r\n        axios.delete(URL).then(response => dispatch({type : 'REMOVE_WORD' , _id : response.data.w._id}))\r\n        .catch(error=>console.log(error.message));\r\n    }\r\n}\r\n\r\nexport function toggleWord(_id , isMemorized){\r\n    return function(dispatch){\r\n        const URL = \"https://server-thinh1411.herokuapp.com/word/\";\r\n        axios.put(URL + _id, {isMemorized : !isMemorized})\r\n        .then(response => dispatch({type : 'TOGGLE_WORD' , _id : response.data.w._id}));\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux'\r\n// import {toggleWord,removeWord} from '../redux/actioncreators'\r\nimport * as actioncreators from '../redux/actioncreators'\r\n\r\nclass Word extends Component {\r\n  getButton() {\r\n    if (this.props.wordInfo.isMemorized) {\r\n      return <button className=\"btn btn-success\">Forgot</button>\r\n    } else {\r\n      return <button className=\"btn btn-danger\">isMemorized</button>\r\n    }\r\n  }\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.toggleWord = this.toggleWord.bind(this);\r\n  }\r\n  toggleWord(){\r\n    const {_id , isMemorized} = this.props.word;\r\n    this.props.toggleWord(_id , isMemorized );\r\n  }\r\n  render() {\r\n    const {word} = this.props;\r\n    return (\r\n      <div className=\"word\" key={word._id}>\r\n        <div className=\"word-container\">\r\n          <h3 className=\"text-success\">{word.en}</h3>\r\n          <h3 className=\"text-danger\">\r\n            {word.isMemorized ? '----' : word.vn}\r\n          </h3>\r\n        </div>\r\n      <div className=\"btn-container\">\r\n          <button\r\n            className={word.isMemorized ? 'btn btn-success' : 'btn btn-danger'}\r\n            onClick={this.toggleWord}\r\n            >\r\n            {word.isMemorized ? 'Forgot' : 'Memorized'}\r\n            \r\n          </button>\r\n          <button\r\n            className=\"btn btn-warning\"\r\n            onClick={()=>this.props.removeWord(word._id)}\r\n            >\r\n            Remove\r\n          </button>\r\n        </div>\r\n      </div>  \r\n    );\r\n  }\r\n}\r\n// export default connect(null,{toggleWord,removeWord})(Word)\r\nexport default connect(null,actioncreators)(Word)\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport * as actioncreators from '../redux/actioncreators';\r\nclass Form extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {txtEn : '' , txtVn : ''}\r\n        // this.addWord = this.addWord.bind(this);\r\n        // this.toggleForm = this.toggleForm.bind(this);\r\n    }\r\n    addWord(){\r\n        const { txtEn , txtVn } = this.state;\r\n        this.props.addWord(txtEn,txtVn);\r\n        this.setState({txtEn : '' , txtVn : ''});\r\n    }\r\n    render() {\r\n        if(!this.props.shouldShowForm) return(\r\n            <button \r\n              className=\"btn btn-success\"\r\n              style={{width : 200 , margin : 10}}\r\n              onClick={()=>this.props.toggleForm()}>\r\n                    +\r\n            </button>\r\n         )\r\n         return(\r\n          <div className=\"form-group word-from\" >\r\n              <input\r\n                  placeholder=\"English\"\r\n                  className=\"form-control\"\r\n                  value={this.state.txtEn}\r\n                  onChange={evt => this.setState({txtEn : evt.target.value})}/>\r\n              <br />\r\n              <input\r\n                  placeholder=\"Vietnamese\"\r\n                  className=\"form-control\"\r\n                  value={this.state.txtVn}\r\n                  onChange={evt => this.setState({txtVn : evt.target.value})}/>\r\n              <br />\r\n              <div className=\"btn-container\">\r\n                  <button \r\n                      className=\"btn btn-success\"\r\n                      onClick={()=>this.addWord()}>\r\n                      Add word\r\n                  </button>\r\n                  <button\r\n                      className=\"btn btn-danger\"\r\n                      onClick={()=>this.props.toggleForm() }>\r\n                      Cancel\r\n                  </button>\r\n              </div>\r\n          </div> \r\n         )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({shouldShowForm : state.shouldShowForm});\r\nexport default connect(mapStateToProps,actioncreators)(Form);\r\n","import React, { Component } from 'react'\r\nimport {connect} from 'react-redux'\r\nclass Filter extends Component {\r\n  render() {\r\n    return (\r\n      <select\r\n      className=\"word\"\r\n      value={this.props.filterMode}\r\n      onChange={evt => this.props.dispatch({type:'SET_FILTER_MODE',filterMode:evt.target.value})}>\r\n      <option value=\"Show_All\">Show All</option>\r\n      <option value=\"Show_Forgot\">Show Forgot</option>\r\n      <option value=\"Show_Memorized\">Show Memorized</option> \r\n    </select>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => ({filterMode:state.filterMode});\r\nexport default connect(mapStateToProps)(Filter);","import React, { Component } from 'react'\r\nimport Word from './Word';\r\nimport Form from './Form';\r\nimport Filter from './Filter';\r\n// import axios from 'axios';\r\nimport {connect} from 'react-redux';\r\nimport * as actioncreators from '../redux/actioncreators';\r\nclass List extends Component { \r\n\r\n  componentWillMount(){\r\n    this.props.setWord();\r\n\r\n  }\r\n\r\n  getFiltermode(){\r\n    const {words , filterMode} = this.props\r\n    const newWords = words.filter(w => {\r\n      if(filterMode === 'Show_Forgot' && w.isMemorized) return false;\r\n      if(filterMode === 'Show_Memorized' && !w.isMemorized) return false;\r\n      return true;\r\n    })\r\n    return newWords\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        {<Form />}\r\n        {<Filter />}\r\n        {this.getFiltermode().map(word => \r\n          <Word \r\n            word={word} \r\n            key={word._id}/>)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToprops = state => ({words : state.words , filterMode : state.filterMode})\r\nexport default connect(mapStateToprops,actioncreators)(List);\r\n","function filterModeReducer(state = \"Show_All\",action){\r\n    if(action.type ==='SET_FILTER_MODE') \r\n        return action.filterMode;\r\nreturn state;\r\n}\r\nexport default filterModeReducer;","// const defaultWords = [\r\n//     {id : 'a1' , en : 'One' , vn : 'Mot' , isMemorized : true},\r\n//     {id : 'a2' , en : 'Two' , vn : 'Hai' , isMemorized : false},\r\n//     {id : 'a3' , en : 'Three' , vn : 'Ba' , isMemorized : true}\r\n//   ]\r\nfunction wordsReducer(state = [],action){\r\n  if(action.type ==='SET_WORDS') return action.words;\r\n    if(action.type ==='TOGGLE_WORD')\r\n    {\r\n      const newWords = state.map(w=>{\r\n        if(w._id !== action._id) return w;\r\n        return{...w,isMemorized:!w.isMemorized}\r\n\r\n      });\r\n      return newWords;\r\n    }\r\n   if(action.type ==='ADD_WORD'){\r\n     const newWords = state.concat(action.word);\r\n     return newWords;\r\n   }\r\n   if (action.type === 'REMOVE_WORD') {\r\n    const newWords = state.filter(w => w._id !== action._id);\r\n    return newWords\r\n}\r\n   return state;\r\n}\r\nexport default wordsReducer;","function shouldShowFormReducer(state = false,action){\r\n    if(action.type ==='TOGGLE_FORM' || action.type ==='ADD_WORD') return !state; //state === shouldShowForm\r\n    return state;\r\n}\r\nexport default shouldShowFormReducer;","import { createStore,combineReducers,Middleware, applyMiddleware } from 'redux'\r\nimport filterModeReducer from './filtermode.reducers'\r\nimport wordsReducer from './words.reducers'\r\nimport shouldShowFormReducer from './shouldshowform.reducers'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst reducer = combineReducers({\r\nwords:wordsReducer,\r\nfilterMode:filterModeReducer,\r\nshouldShowForm: shouldShowFormReducer\r\n\r\n});\r\n  export const store = createStore(reducer,applyMiddleware(thunk));","import React, { Component } from 'react';\nimport List from './components/List';\nimport './App.css';\nimport {store} from './redux/store'\n// import Filter from './components/Filter';\n// import Form from './components/Form';\n// import Loop from './components/Loop';\n// import Box from './components/Box';\n// import Parent from './components/Parent';\n\n\nimport {Provider} from 'react-redux';\n\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <Provider store={store}>\n            <List/>\n          </Provider>\n          \n          \n      </div>\n      \n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}